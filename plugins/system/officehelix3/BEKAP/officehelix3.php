<?php
/**
* @package		Helix3 Framework
* @author		JoomShaper http://www.joomshaper.com
* @copyright	Copyright (c) 2010 - 2017 JoomShaper
* @license		http://www.gnu.org/licenses/gpl-2.0.html GNU/GPLv2 or Later
*
* @package      Office Template
* @copyright    Copyright (C) 2010 - 2018 Stack Ideas Sdn Bhd. All rights reserved.
* @license      GNU/GPL, see LICENSE.php
* Office Template is free software. This version may have been modified pursuant
* to the GNU General Public License, and as distributed it includes or
* is derivative of works licensed under the GNU General Public License or
* other free or open source software licenses.
* See COPYRIGHT.php for copyright notices and details.
*/
defined('_JEXEC') or die('Unauthorized Access');

jimport('joomla.plugin.plugin');
jimport( 'joomla.event.plugin' );
jimport('joomla.registry.registry');

if (!class_exists('OfficeHelix3')) {
  require_once (__DIR__ . '/core/officehelix3.php');
}

class plgSystemOfficeHelix3 extends JPlugin
{
	protected $autoloadLanguage = true;

	/*
	 * This function is responsible to enqueue error/notice generated by EasySocial.
	 *
	 */
	public function onBeforeRender()
	{
		if (JFactory::getApplication()->isAdmin()) {
			return;
		}

		if (!in_array($this->getTemplateName(), array('si_office', 'office'))) {
			return;
		}
		
		$app = JFactory::getApplication();

		$session = JFactory::getSession();
		$messages = $session->get('messages', array(), SOCIAL_SESSION_NAMESPACE);
		$session->clear('messages', SOCIAL_SESSION_NAMESPACE);

		if (!$messages) {
			return;
		}

		$queueMessages = $app->getMessageQueue();

		foreach ($messages as $message) {
			$data = unserialize($message);

			if (!is_object($data)) {

				$obj = new stdClass();
				$obj->message = $data;
				$obj->type = 'info';

				$data = $obj;
			}

			if (empty($queueMessages)) {
				$app->enqueueMessage($data->message, $data->type);
			} else {
				$flag = false;

				foreach ($queueMessages as $item) {
					if ($item['message'] == $data->message) {
						$flag = true;
						break;
					}
				}

				if (!$flag) {
					$app->enqueueMessage($data->message, $data->type);
				}
			}
		}
	}

	/*
	 * Copied style
	 *
	 */
	public function onAfterDispatch() 
	{
		if (JFactory::getApplication()->isAdmin()) {
			return;
		}

		if (!in_array($this->getTemplateName(), array('si_office', 'office'))) {
			return;
		}

		if (!JFactory::getApplication()->isAdmin()) {

			$activeMenu = JFactory::getApplication()->getMenu()->getActive();

			if (is_null($activeMenu)) {
				$template_style_id = 0;
			} else {
				$template_style_id = (int) $activeMenu->template_style_id;
			}

			if ($template_style_id > 0) {
				JTable::addIncludePath(JPATH_ADMINISTRATOR . '/components/com_templates/tables');
				$style = JTable::getInstance('Style', 'TemplatesTable');
				$style->load($template_style_id);

				if (!empty($style->template)) {
					JFactory::getApplication()->setTemplate($style->template, $style->params);
				}
			}
		}
	}

	/*
	 * On content prepare. Used for com_content.
	 *
	 */
	public function onContentPrepareForm($form, $data) 
	{
		if (!in_array($this->getTemplateName(), array('si_office', 'office'))) {
			return;
		}

		$doc = JFactory::getDocument();
		$plg_path = JURI::root(true) . '/plugins/system/officehelix3';
		JForm::addFormPath(JPATH_PLUGINS . '/system/officehelix3/params');

		// Add Helix menu params to the menu item
		if ($form->getName()=='com_menus.item') { 

			JHtml::_('jquery.framework');

			if ($data['id'] && $data['parent_id'] == 1) {

				JHtml::_('jquery.ui', array('core', 'more', 'sortable'));

				$doc->addScript($plg_path . '/assets/js/jquery-ui.draggable.min.js');
				$doc->addStyleSheet($plg_path . '/assets/css/bootstrap.css');
				$doc->addStyleSheet($plg_path . '/assets/css/font-awesome.min.css');
				$doc->addStyleSheet($plg_path . '/assets/css/modal.css');
				$doc->addStyleSheet($plg_path . '/assets/css/menu.generator.css');
				$doc->addScript($plg_path . '/assets/js/modal.js');
				$doc->addScript($plg_path . '/assets/js/menu.generator.js' );
				$form->loadFile('menu-parent', false);

			} else {
				$form->loadFile('menu-child', false);
			}

			$form->loadFile('page-title', false);

		}

		// Article Post format
		// if ($form->getName()=='com_content.article') {
		// 	JHtml::_('jquery.framework');
		// 	$doc->addStyleSheet($plg_path.'/assets/css/font-awesome.min.css');
		// 	$doc->addScript($plg_path.'/assets/js/post-formats.js');

		// 	$tpl_path = JPATH_ROOT . '/templates/' . $this->getTemplateName();

		// 	if (JFile::exists($tpl_path . '/post-formats.xml')) {
		// 		JForm::addFormPath($tpl_path);
		// 	} else {
		// 		JForm::addFormPath(JPATH_PLUGINS . '/system/officehelix3/params');
		// 	}

		// 	$form->loadFile('post-formats', false);
		// }
	}

	/*
	 * Live Update system
	 *
	 */
	public function onExtensionAfterSave($option, $data) 
	{
		// if ($option == 'com_templates.style' && !empty($data->id)) {

		// 	$params = new JRegistry;
		// 	$params->loadString($data->params);

		// 	$email = $params->get('joomshaper_email');
		// 	$license_key = $params->get('joomshaper_license_key');
		// 	$template = trim($data->template);

		// 	if(!empty($email) and !empty($license_key) )
		// 	{

		// 		$extra_query = 'joomshaper_email=' . urlencode($email);
		// 		$extra_query .='&amp;joomshaper_license_key=' . urlencode($license_key);

		// 		$db = JFactory::getDbo();

		// 		$fields = array(
		// 			$db->quoteName('extra_query') . '=' . $db->quote($extra_query),
		// 			$db->quoteName('last_check_timestamp') . '=0'
		// 		);

		// 		$query = $db->getQuery(true)
		// 			->update($db->quoteName('#__update_sites'))
		// 			->set($fields)
		// 			->where($db->quoteName('name').'='.$db->quote($template));
		// 		$db->setQuery($query);
		// 		$db->execute();
		// 	}
		// }
	}

	/*
	 * Used for export template settings.
	 *
	 */
	public function onAfterRoute()
	{
		// $japps = JFactory::getApplication();

		// if ( $japps->isAdmin() )
		// {
		// 	$user = JFactory::getUser();

		// 	if( !in_array( 8, $user->groups ) ){
		// 		return false;
		// 	}

		// 	$inputs = JFactory::getApplication()->input;

		// 	$option         = $inputs->get ( 'option', '' );
		// 	$id             = $inputs->get ( 'id', '0', 'INT' );
		// 	$helix3task     = $inputs->get ( 'helix3task' ,'' );

		// 	if ( strtolower( $option ) == 'com_templates' && $id && $helix3task == "export" )
		// 	{
		// 	   $db = JFactory::getDbo();
		// 	   $query = $db->getQuery(true);
		// 	   $query
		// 			->select( '*' )
		// 			->from( $db->quoteName( '#__template_styles' ) )
		// 			->where( $db->quoteName( 'id' ) . ' = ' . $db->quote( $id ) . ' AND ' . $db->quoteName( 'client_id' ) . ' = 0' );
		// 		$db->setQuery( $query );
		// 		$result = $db->loadObject();
		// 		header( 'Content-Description: File Transfer' );
		// 		header( 'Content-type: application/txt' );
		// 		header( 'Content-Disposition: attachment; filename="' . $result->template . '_settings_' . date( 'd-m-Y' ) . '.json"' );
		// 		header( 'Content-Transfer-Encoding: binary' );
		// 		header( 'Expires: 0' );
		// 		header( 'Cache-Control: must-revalidate' );
		// 		header( 'Pragma: public' );
		// 		echo $result->params;
		// 		exit;
		// 	}
		// }
	}

	/*
	 * Used to retrieve the current template.
	 *
	 */
	private function getTemplateName()
	{
		$db = JFactory::getDbo();
		$query = $db->getQuery(true);
		$query->select($db->quoteName(array('template')));
		$query->from($db->quoteName('#__template_styles'));
		$query->where($db->quoteName('client_id') . ' = 0');
		$query->where($db->quoteName('home') . ' = 1');
		$db->setQuery($query);

		return $db->loadObject()->template;
	}

	/*
	 * 
	 *
	 */
	public function onAfterRender() 
	{
		if (JFactory::getApplication()->isAdmin()) {
			return;
		}

		if (!in_array($this->getTemplateName(), array('si_office', 'office'))) {
			return;
		}
		
		$body = JResponse::getBody();
		$preset = OfficeHelix3::Preset();

		$body = str_replace('{helix_preset}', $preset, $body);

		JResponse::setBody($body);
	}

	/*
	 * Re-sorting the styling to move component's styling to the top.
	 *
	 */
	public function onRenderModule($module, $attr)
	{
		$doc = JFactory::getDocument();

		foreach ($doc->_styleSheets as $key => $value) {
			if ((strpos($key, 'com_easyblog') !== false)
				|| (strpos($key, 'com_easysocial') !== false)
				|| (strpos($key, 'com_easydiscuss') !== false)) {

				unset($doc->_styleSheets[$key]);
				$style = array($key => $value);
				$doc->_styleSheets = array_merge($style, $doc->_styleSheets);
			}
		}
	}
}
